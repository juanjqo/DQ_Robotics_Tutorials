#include <iostream>
#include <string>
#include <thread>
#include <dqrobotics/DQ.h>
#include <dqrobotics/interfaces/vrep/DQ_VrepInterface.h>
#include <dqrobotics/utils/DQ_LinearAlgebra.h>
#include <dqrobotics/utils/DQ_Constants.h>
#include <Eigen/Dense>
#include <dqrobotics/robot_modeling/DQ_SerialManipulatorDH.h>
#include <dqrobotics/robot_control/DQ_PseudoinverseController.h>
#include <dqrobotics/robot_control/DQ_KinematicController.h>

using namespace Eigen;

int main(void)
{
    DQ_VrepInterface vi;
    vi.connect(19997,100,10);
    vi.set_synchronous(true);
    std::cout << "Starting V-REP simulation..." << std::endl;
    vi.start_simulation();
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    
    DQ_PseudoinverseController controller(&franka);
    controller.set_gain(0.5);
    controller.set_damping(0.05);
    controller.set_control_objective(DQ_robotics::Translation);
    controller.set_stability_threshold(0.00001);

    DQ xdesired = 1 + E_*0.5*DQ(0, 0.2, 0.3, 0.3);
    vi.set_object_pose("DesiredFrame", xdesired);

    int i=0;
    while (not controller.system_reached_stable_region())
    {

        VectorXd q = vi.get_joint_positions(jointnames);
        vi.set_object_pose("ReferenceFrame", franka.fkm(q));
        VectorXd u = controller.compute_setpoint_control_signal(q, vec4(xdesired.translation()));
        std::cout << "error: " <<controller.get_last_error_signal().norm()<<" Iteration: "<<i<<std::endl;
        std::cout<< "Is stable?: "<<controller.system_reached_stable_region()<<std::endl;

        vi.set_joint_target_velocities(jointnames, u);
        vi.trigger_next_simulation_step();

        std::cout<< "q_dot: "<<vi.get_joint_velocities(jointnames)<<std::endl;
        i++;

    }
    std::cout << "Stopping V-REP simulation..." << std::endl;
    vi.stop_simulation();
    vi.disconnect();
    return 0;
}